{
  "tech": [
    {
      "id": "2",
      "author": "강현구",
      "title": "Transpiler, “사용”말고 “활용”하기",
      "createdAt": "2024-05-24",
      "thumnail": "https://static.toss.im/assets/payments/contents/paymetns-benner-10.png",
      "summary": "매일 “사용”만 하는 transpiler, 토스뱅크에서는 한 단계 더 잘 “활용”해 보기로 했어요. 오늘은 transpiler로 로깅 과정을 개선한 사례를 소개 드릴게요.",
      "content": "<p>안녕하세요. 토스뱅크 프론트엔드 개발자 강현구입니다.</p><p>프론트엔드 개발자라면 transpiler를 한 번쯤은 들어보거나 사용해 봤을&nbsp;거예요. 프론트엔드 생태계가 빠르게 발전하면서, transpiler는 애플리케이션을 만들고 배포하는 과정에서 빠질 수 없는 필수 요소가 되었어요.</p><p>토스뱅크에서는 개발 경험을 향상하기 위해서 transpiler를 다양하게 활용하고 있는데요. 오늘은 transpiler로 로깅 과정을 개선한 사례를 소개 드릴게요.</p><h2>Transpiler란?</h2><p>Transpiler는 코드를 변환하는 도구를 의미해요. JavaScript의 ES6 문법을 ES5 문법으로 변환하거나, React의 JSX 및 Typescript 코드를 브라우저가 이해할 수 있는 Javascript로 변환하는 도구에요. Transpiler 덕에 여러 브라우저 호환성을 유지하면서 다양한 문법을 활용할 수 있죠.</p><p>대표적인 transpiler로는 Babel과 SWC가 있어요. 토스뱅크는 마이크로 프론트엔드 구조로 여러 서비스들의 각자 입맛에 맞게 Babel과 SWC를 사용하고 있어요. </p><p>언급한 내용만으로도 transpiler가 개발자에게 가져다준 편의성은 굉장해요. 비즈니스 로직에만 집중할 수 있도록 코드를 작성하는데 편리함을 제공하고, 부가적인 작업은 알아서 처리해 주는 거죠. 매일 이렇게 &ldquo;사용&rdquo;만 하는 transpiler, 토스뱅크에서는 한 단계 더 잘 &ldquo;활용&rdquo;해 보기로 했어요.</p><h2>로깅이란?</h2><p>토스뱅크는 데이터 기반으로 의사결정이 이루어져요. 올바른 결정을 위해서 개인정보 등 민감 정보를 제외한 유저의 클릭, 페이지뷰 등 다양한 유저 활동에 대한 데이터를 수집하고 있어요. 이 과정을 <code>로깅</code>이라고 해요. (유저의 데이터는 개인정보 처리 동의를 기반으로 수집하고 이용해요)</p><p>로깅은 대부분의 서비스 코드에서 필요해요. 그래서 적절히 추상화하여 비즈니스 로직과 구분할 필요가 있어요. 전반적인 개발 경험을 해치지 않으면서 유저 데이터를 쌓기 위해서죠.</p><p>또한 효율적으로 데이터를 수집하려면 화면에서 발생하는 모든 클릭 이벤트를 로깅하지 않고, 유의미한 정보만 로깅해야 해요. 예를 들어, 실제로 clickable한 버튼을 클릭했을 경우엔 로깅하고, clickable하지 않은 글자나 빈 화면을 클릭한 경우는 무시해야겠죠. </p><p>여러분은 로깅을 어떻게 설계할 것 같나요? 크게는 아래 두 가지 방식이 있어요.</p>"
    },
    {
      "id": "3",
      "author": "박서진",
      "title": "패키지 매니저의 과거, 토스의 선택, 그리고 미래",
      "createdAt": "2024-05-23",
      "thumnail": "https://static.toss.im/assets/payments/contents/tech-banner-11.png",
      "summary": "토스는 왜 패키지 매니저로 Yarn을 선택했을까요? 이번 라이트닝 토크에서는 JavaScript의 패키지 매니저, 동작 방식, 그리고 토스의 선택과 앞으로의 방향성에 대해 이야기해 보려고 해요.",
      "content": "<p>토스 기술 조직의 각 챕터는 라이트닝 토크에서 다양한 주제에 대한 인사이트와 아이디어를 자유롭게 공유합니다. 기록을 통해 생생한 라이트닝 토크 현장을 함께 느껴보세요!</p><aside><h4>이번 라이트닝 토크에서 다루는 내용 - 패키지 매니저란? - 패키지 매니저가 동작하는 세 가지 단계 - npm, pnpm, Yarn PnP에서 패키지를 설치하는 방법의 차이 - 토스가 Yarn을 선택한 이유와 앞으로의 방향성 - 번외: 브라우저에서 웹 표준으로 패키지를 관리하는 방법</h4></aside><p>오늘 다룰 내용은, 많아요. 사실 이렇게 많을 줄 몰랐어요! 주제는 패키지 매니저 인데요. 어떤 기술을 왜 선택했는지 그 배경을 이해하려면 먼저 개념을 명확히 알아야 해요. 그래서 JavaScript 패키지 매니저가 무엇인지 먼저 다룬 뒤에, 패키지 매니저가 동작하는 세 가지 단계를 설명할게요. 그리고 npm, pnpm, 그리고 Yarn, 이 세 가지 패키지 매니저가 어떻게 다른지 서로 다른 패키지 매니저의 특징을 살펴보고, 마지막으로 토스는 왜 Yarn을 선택했고, 앞으로는 어떤 방향성이 될 것인지 소개하겠습니다.</p><h2>패키지 매니저란?</h2><p>패키지 매니저의 정의부터 시작해보죠. 잘 아시는 분들도 많을 텐데요. JavaScript나 TypeScript를 사용하면 이렇게 <code>require</code>나 <code>import</code> 구문을 사용해서 외부 의존성을 참조하잖아요. 그걸 올바르게 참조할 수 있도록 보장해주는 프로그램이라고 생각하시면 돼요.</p>"
    },
    {
      "id": "4",
      "author": "함종현",
      "title": "서버 증설 없이 처리하는 대규모 트래픽",
      "createdAt": "2024-05-13",
      "thumnail": "https://static.toss.im/assets/payments/contents/liveshopping-thumb.jpg",
      "summary": "늘어나는 트래픽을 잘 처리하기 위해 서버 개발자는 어떤 고민을 해야 할까요? “라이브 쇼핑 보기” 서비스에 대규모 트래픽이 들어오면서 겪은 문제와 해결책을 공유드려요.",
      "content": "<p>안녕하세요. 저는 토스의 광고 제품과 플랫폼을 개발하는 서버 개발자 함종현입니다. 저는 토스에서 라이브 쇼핑 보기 서비스를 담당하고 있어요.</p><h2>라이브 쇼핑 보기 서비스란</h2><p>라이브 쇼핑 보기는 토스의 &ldquo;혜택&rdquo; 탭에 있는 서비스예요. 라이브 쇼핑 보기를 통해서 유저는 상품을 구매하면 포인트를 적립 받을 수 있고, 광고주는 빠르게 상품 물량을 소진시킬 수 있어요.</p><p>라이브 쇼핑 보기 서비스를 론칭하는 날, 예상했던 것보다 굉장히 많은 유저가 들어왔어요. 그 후에도 매일 신규 유저가 늘었고, 서비스의 성장이 눈에 띄게 보였죠. 그러면서 자연스럽게 라이브 방송하는 광고주도 많아졌습니다.</p><h2>급격하게 성장하는 서비스가 겪는 문제</h2><p>이렇게 라이브 쇼핑 보기 서비스는 피크 시간대 동시 접속자 수는 분당 수십만 명, 포인트 지급 요청 API 요청은 초당&nbsp;수십만 건이&nbsp;오는 서비스로 성장했는데요. 급격히 늘어난 트래픽은 성장하는 서비스 서버에 치명적일 수 있어요. 서버가 트래픽을 유연하게 처리하지 못하면 유저에게 안 좋은 경험을 제공하고, 최악의 상황에서는 이탈할 수도 있기 때문이에요. </p><p>트래픽이 급격히 늘어나면 쓰레드가 밀리는 것부터 시작해서 데이터베이스와 캐시 시스템, 다른 서버와 같이 사용하는 서버 애플리케이션, 게이트웨이 등에서 장애가 발생할 수 있는데요. Redis와 같은 캐시 서비스의 메모리 사용량이나 CPU 사용량이 늘어나면 캐시가 누락되어 데이터베이스에 큰 부하를 줄 수 있어요. 데이터베이스 장애는 데이터를 오염하거나 다른 서비스의 영향을 줄 수 있고요.</p><p>간단히 서버 증설로 증가한 트래픽을 모두 처리할 수 있다면 가장 좋겠지만 고민해야 하는 점이 몇 가지 더 있습니다. 증설 비용 규모, 그리고 특정 시점에만 트래픽이 몰리면 그 외 시간에는 자원이 낭비될 수 있다는 점이 크고요. 서버 증설 만으로 해결할 수 없는 다른 문제가 생길 수도 있어요.</p><p>늘어나는 트래픽을 잘 처리하기 위해 서버 개발자는 어떤 고민을 해야 할까요?</p><h2>라이브 쇼핑 서버가 만났던 문제</h2><p>먼저 라이브 쇼핑 서버가 겪었던 몇 가지 문제를 소개하고 해결책을 살펴볼게요.</p><h3>1. Redis 과부하 문제</h3><p>매일 정각에 수십만 명의 유저에게 방송 리스트, 포인트 적립 내역 등을 Redis에 저장하고 읽었는데요. 유저가 늘면서 커맨드와 캐싱하는 데이터 양이 급격히 늘어났어요. CPU가 커맨드를 너무 느리게 처리하거나 데이터가 너무 많으면 Redis에 과부하가 생길 수 있는데요. Redis의 과부하는 데이터베이스의 부하로 이어질 수 있기 때문에 심각한 문제입니다.</p><p>Redis 과부하를 방지하려면 Redis가 캐싱하는 데이터와 읽고 쓰는 시점을 체크해야 하는데요. 먼저 Redis가 캐싱하는 데이터를 두 가지로 분류할 수 있어요. 모든 유저에게 동일하게 보이는 Universal Data와 유저 별로 다르게 사용되는 User-Specific Data입니다. 토스 라이브 쇼핑 서비스에서 전자는 모든 유저가 볼 수 있는 방송 리스트, 방송 상세 정보 등을 캐싱하고 후자는 방송 시청 여부 등을 캐싱합니다.</p>"
    }
  ],
  "design": [
    {
      "id": "1",
      "author": "황수재",
      "title": "드래그 앤 드롭은 사실 편한 UX가 아니다?",
      "createdAt": "2024-05-30",
      "thumnail": "https://static.toss.im/illusts-content/img-tech-dragdrop.png",
      "summary": "드래그 앤 드롭은 장애를 가진 사용자에게는 불편한 UX가 되기도 해요. 오늘은 “나눠모으기 통장” 서비스의 접근성 설계 단계부터 개발 과정까지 소개하고 접근성을 챙길 수 있는 간단한 방법을 알려드릴게요.",
      "content": "<p>스마트폰에서 드래그 앤 드롭(Drag &amp; Drop) 많이 사용해 보셨을 텐데요. 리스트에 있는 요소의 순서를 변경할 때 드래그 앤 드롭은 많은 사용자에게 편하고 직관적인 UX로 보이죠. 하지만 장애를 가진 사용자에게는 불편한 UX가 되기도 해요.</p><p>특히 터치스크린은 정밀한 조작이 필요하기 때문에, 운동장애가 있는 사용자들은 정확한 위치로 요소를 끌어다 놓기 어려워요. 또한 시각 장애가 있는 사용자는 순서가 바뀌었다는 걸 시각적인 피드백만으로는 이해하기 어려울 수 있어요.</p><p>토스뱅크에는 용도에 따라 계좌를 생성하여 돈을 나눠서 모을 수 있는 &ldquo;나눠모으기 통장&rdquo; 서비스가 있는데요. 서비스를 사용하는 모든 고객이 편하게 계좌의 순서를 바꿀 수 있도록 접근성을 굉장히 많이 신경썼어요. 오늘은 &ldquo;나눠모으기 통장&rdquo; 서비스의 접근성 설계 단계부터 개발 과정까지 소개드리고, 접근성을 쉽게 챙길 수 있는 방법을 알려드릴게요.</p><h2>디자이너, 컨설턴트, 개발자간 우당탕탕 커뮤니케이션</h2><p>토스뱅크에서는 순서 변경이라는 비교적 단순한 기능 하나에도 모든 고객에게 편리한 경험을 선사하고 싶었어요. 그래서 접근성이라는 목표를 향해 디자이너, 접근성 컨설턴트, 개발자 간의 긴밀한 협력이 시작됐어요.</p>"
    },
    {
      "id": "5",
      "author": "황희영",
      "title": "제품이 커지면 디자인 시스템 가이드는 어떻게 개선돼야 할까?",
      "createdAt": "2024-04-05",
      "thumnail": "https://static.toss.im/illusts/240403-mainthumbnail.png",
      "summary": "디자인 시스템을 운영하면서, 컴포넌트의 유려함뿐만 아니라 가이드의 효율적인 제작도 중요하다는 것을 깨달았어요. 이번 아티클에서는 TDS 컴포넌트 가이드를 제작 할 때 어떤 부분들을 고려해서 만들어가고 있는지 소개해드릴게요.",
      "content": "<p>300명이 넘는 개발자와 디자이너를 위한 디자인 시스템을 4명의 디자이너가 운영하고 있어요. 이 과정에서 컴포넌트의 유려함뿐만 아니라, 가이드의 효율적인 제작도 중요함을 깨달았어요. 이번 아티클에서는 TDS 컴포넌트 가이드를 제작할 때 어떤 부분들을 고려해서 만들어가고 있는지 소개해드릴게요.</p><h2>문제 </h2><p>컴포넌트를 개선하려고 할 때, 기존 가이드로는 동료 플랫폼 디자이너 및 개발자분들과 소통하기 어려웠어요. 컴포넌트 가이드 작성에 대한 규칙이 없으니 디자이너마다 작성된 방식이 제각기였고, 이 때문에 기존에 작성된 가이드를 읽는 데에도 컴포넌트를 온전히 파악하기 어려웠기 때문이에요.</p><p>기존 컴포넌트의 가이드에서 어떤 부분들이 문제였길래, 컴포넌트를 만드는데 메이커들이 어려움을 겪었을까요? 그리고 플랫폼 디자이너들은 이 문제들을 어떻게 해결했을까요?</p><h2>해결책</h2><h3>가이드 읽는 방향성 정하기</h3><p>기존에는 한눈에 스펙을 확인할 수 있도록 정사각형에 가까운 형태로 가이드를 배치했어요. </p>"
    }
  ]
}
